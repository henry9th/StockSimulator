@{
    ViewData["Title"] = "Home Page";

    var allStockPriceData = ViewData["allStockPriceData"];
}

    <asp:Content ID="BodyContent" ContentPlaceHolderID="MainContent" runat="server">

        <div class="jumbotron">
            <h1>Investment Calculator</h1>
            <p class="lead">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur eget dictum leo. Suspendisse potenti. Nunc tempor viverra mollis. Mauris posuere ullamcorper est, at cursus nibh tincidunt sit amet. Nam quam tellus, posuere vel porta eget, ultrices varius magna. Nam sollicitudin at sem vel aliquet. In sit amet posuere neque. Integer laoreet, dolor non posuere hendrerit, velit urna vehicula libero, vitae fringilla quam nulla eleifend augue.
            </p>
        </div>

        <h6>#&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;$ </h6>

        <label class="switch">
            <input id="input-checkbox" type="checkbox" onclick="updateInputHeader();">
            <span class="slider"></span>
        </label>

        <h6>Reinvest Dividends?</h6>

        <label class="switch">
            <input id="input-checkbox-reinvest" type="checkbox">
            <span class="slider" id="reinvest-slider"></span>
        </label>

        <div class="row" id="input-rows">

            <div class="row input-row">
                <div class="col-md-4" id="stock-inputs">
                    <h5>Stock Symbol</h5>
                    <input type="text" />
                </div>

                <div class="col-md-4" id="numShares-inputs">
                    <h5 id="input-type-text"># of Shares</h5>
                    <input type="number" min="0" />
                </div>

                <div class="col-md-3" id="date-inputs">
                    <h5>Date</h5>
                    <input type="date" />
                </div>
            </div>
        </div>



        <div class="row" ">
            <div id="submit-options-div" class="col-md-3">
                <button class="" id="add-new-row-button" onclick="addNewRow(); return false">+ New row</button> <br />

                <div hidden id="result-date-div">Target Date:<input type="date" id="result-date" /></div> <br />

                <button class="" id="calculate-button" onclick="calculatePortfolio(); return false">Calculate</button>

            </div>

        </div>

        <div id="result-div">
            <h3 id="total-cost-text"></h3>
            <h3 id="total-value-text"></h3>
            <h3 id="dividend-earned-text"></h3>

            <div id="chartContainer1" class="chart" style="height: 500px; width: 100%;"></div>
            <div id="chartContainer2" class="chart" style="height: 500px; width: 100%;"></div>

            <script src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
            <script src="https://canvasjs.com/assets/script/jquery.canvasjs.min.js"></script>
        </div>


        <script>

        document.getElementById("result-date").value = (new Date()).toISOString().substr(0, 10);

            function updateInputHeader() {
                if (document.getElementById("input-checkbox").checked) {
                    document.getElementById("input-type-text").innerHTML = "$ (USD)"
                } else {
                    document.getElementById("input-type-text").innerHTML = "# of Shares"
                }
            }

        // Adding a new row for inputting stock purchase
        function addNewRow() {
            var stockInputsDiv = document.getElementById("stock-inputs");
            var numSharesDiv = document.getElementById("numShares-inputs");
            var dateDiv = document.getElementById("date-inputs");

            var stockInput = document.createElement("input");
            stockInput.setAttribute("type", "text");

            var numSharesInput = document.createElement("input");
            numSharesInput.setAttribute("type", "number");
            numSharesInput.setAttribute("min", "0");

            var dateInput = document.createElement("input");
            dateInput.setAttribute("type", "date");

            stockInputsDiv.appendChild(stockInput);
            numSharesDiv.appendChild(numSharesInput);
            dateDiv.appendChild(dateInput);
        }

        // Organize the data before sending it to the controller
        function calculatePortfolio() {
            var stockInputs = $("#stock-inputs input");
            var numSharesInputs = $("#numShares-inputs input");
            var dateInputs = $("#date-inputs input");

            var targetDate = document.getElementById("result-date").value;

            var count = stockInputs.length;

            let inputData = [];

            // Organize each row data into each dict
            for (i = 0; i < count; i++) {
                var symbol = stockInputs[i].value;
                var numShares = numSharesInputs[i].value;
                var date = dateInputs[i].value;

                console.log(symbol);
                console.log(numShares);
                console.log(date);

                if (symbol == "" || isNaN(numShares) || numShares < 0 || date == "") {
                    alert("Unallowed value on row: " + (i + 1));
                    return;
                }

                inputData.push({
                    symbol: symbol,
                    sharesBought: numShares,
                    date: date
                });

            }
            console.log("inputData:", inputData);

            var moneyFormat = document.getElementById("input-checkbox").checked;
            var reinvestDividends = document.getElementById("input-checkbox-reinvest").checked;

            $.ajax({
                url: "@Url.Action("Calculate")",
                dataType: "json",
                type: 'POST',
                data: { inputData: JSON.stringify(inputData), targetDate: targetDate, moneyFormat: moneyFormat, reinvestDividends: reinvestDividends },
                success: function (response) {
                    displayResults(response.result);
                },
                error: function (error) {
                    console.log(error);
                    alert("Error !!");
                    }
            });
        }

        function displayResults(result) {

            var formattedResult = JSON.parse(result);

            var allStockPriceData = formattedResult.allStockPriceData;

            var networthDataPoints = formattedResult.networthDataPoints;

            var finalDataPoint = networthDataPoints[networthDataPoints.length - 1];

            console.log("networthDataPoints:", networthDataPoints);

            document.getElementById("total-cost-text").innerHTML = "Total Cost: " + finalDataPoint.totalCost.toFixed(2);
            document.getElementById("total-value-text").innerHTML = "Value as of today: " + finalDataPoint.totalValue.toFixed(2);

            if (finalDataPoint.dividendEarned > 0) {
                document.getElementById("dividend-earned-text").innerHTML = "Earnings from Dividends: " + finalDataPoint.dividendEarned.toFixed(2);
            } else {
                document.getElementById("dividend-earned-text").innerHTML = "Value from shares bought with Dividends: " + finalDataPoint.valueOfSharesFromDividend.toFixed(2);
            }


            var dataPointsForNetworth = [];

            networthDataPoints.forEach(function (dataPoint) {
                dataPointsForNetworth.push({ x: new Date(dataPoint.date), y: dataPoint.totalValue});
            });

            var options =  {
	            animationEnabled: true,
	            theme: "dark2",
	            title: {
                    text: "Portfolio Value",
                    fontSize: 30,
                    fontFamily: "Calibri"
	            },
	            axisX: {
		            valueFormatString: "DD MMM YYYY",
	            },
	            axisY: {
		            title: "USD",
		            titleFontSize: 24,
                    includeZero: false,
                    fontFamily: "Calibri"
	            },
	            data: [{
		            type: "spline",
		            yValueFormatString: "$#,###.##",
		            dataPoints: dataPointsForNetworth
	            }]
            };

            var networthOverTimeChart = new CanvasJS.Chart("chartContainer1", options);

            networthOverTimeChart.render();

            var earningsDataPoints = [];
            var totalEarnings = finalDataPoint.totalValue - finalDataPoint.totalCost;

            if (totalEarnings > 0) {
                // if dividends were re-invested
                if (finalDataPoint.dividendEarned > 0) {
                    var earningsFromStockGrowth = totalEarnings - finalDataPoint.dividendEarned;
                    earningsDataPoints.push({ y: (earningsFromStockGrowth / totalEarnings) * 100, label: "Stock Value Growth" })
                    earningsDataPoints.push({ y: (finalDataPoint.dividendEarned / totalEarnings) * 100, label: "Dividends Earned" })
                } else {
                    var earningsFromStockGrowthExcludingDividends = totalEarnings - finalDataPoint.valueOfSharesFromDividend;
                    earningsDataPoints.push({ y: (earningsFromStockGrowthExcludingDividends / totalEarnings) * 100, label: "Stock Value Growth" })
                    earningsDataPoints.push({ y: (finalDataPoint.valueOfSharesFromDividend / totalEarnings) * 100, label: "Shares from dividends" })
                }

                options = {
                    animationEnabled: true,
                    theme: "dark2",
                    title: {
                        text: "Earning Source",
                        fontSize: 30,
                        fontFamily: "Calibri"
                    },
                    data: [{
                        type: "pie",
                        startAngle: 40,
                        toolTipContent: "<b>{label}</b>: {y}%",
                        showInLegend: "true",
                        legendText: "{label}",
                        indexLabelFontSize: 16,
                        indexLabel: "{label} - {y}%",
                        dataPoints: earningsDataPoints
                    }]
                };

                var earningSource = new CanvasJS.Chart("chartContainer2", options);

                earningSource.render();
            }

        }

        </script>

    </asp:Content>
