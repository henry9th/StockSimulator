@{
    ViewData["Title"] = "Home Page";

    var allStockPriceData = ViewData["allStockPriceData"];
}

    <asp:Content ID="BodyContent" ContentPlaceHolderID="MainContent" runat="server">

        <div class="jumbotron">
            <h1>Investment Calculator</h1>
            <p class="lead">
                Some notes about how this works: <br />
                <ul>
                    <li>The tool uses <i>closing</i> prices</li>
                    <li>Interval is in days</li>
                    <li>You can choose to input either the number of shares or an amount of money for buying the shares (See the toggle switch below)</li>
                    <li>You can choose if you would like to reinvest earned dividends and buy shares on the same day</li>
                    <li>If you enter a date where the market is not open or is before IPO, then it will buy on the next available date </li>
                    <li>If a frequency of 1 is entered, then weekend days would be carried over so it would buy 3 shares on Monday</li>
                    <li>The "Value Growth Source" pie chart is only generated when there is positive growth (current value > cost) </li>
                    <li>Errors may occur due to API call limits, otherwise, it's on me</li>
                </ul>
            </p>
        </div>

        <div class="switch-div">
            <h6 class="switch-headers">#&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;$ </h6>

            <label class="switch">
                <input id="input-checkbox" type="checkbox" onclick="updateInputHeader();" checked>
                <span class="slider"></span>
            </label>
        </div>

        <div class="switch-div">
            <h6 class="switch-headers">Reinvest Dividends?</h6>

            <label class="switch">
                <input id="input-checkbox-reinvest" type="checkbox">
                <span class="slider" id="reinvest-slider"></span>
            </label>
        </div>

        <div class="row" id="inputs-all-rows">

            <div class="row">
                <h5 class="header-text" id="stock-text">Stock Symbol</h5>
                <h5 class="header-text" id="input-type-text">$ (USD)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</h5>
                <h5 class="header-text" id="date-text">Date</h5>
                <h5 class="header-text">Interval</h5>
            </div>

            <div class="inputs row">
                @*<input class="stock-inputs" type="text" />
                <input class="numShares-inputs" type="number" min="0" />
                <input class="date-inputs" type="date" />*@
            </div>

        </div>



        <div class="row">
            <div id="submit-options-div" class="col-md-3">
                <button class="" id="add-new-row-button" onclick="addNewRow(); return false">+ New row</button> <br />

                <div hidden id="result-date-div">Target Date:<input type="date" id="result-date" /></div> <br />

                <button class="" id="calculate-button" onclick="calculatePortfolio(); return false">Calculate</button>

            </div>

        </div>

        <div id="result-div">
            <div class="loader"></div>
            <div id="empty-block"></div>

            <div id="result-data">
                <h3 id="roi-text"></h3>
                <h3 id="total-cost-text"></h3>
                <h3 id="total-value-text"></h3>
                <h3 id="dividend-earned-text"></h3>
                <h3 id="average-annual-yield-text"></h3>

                <div id="chartContainer1" class="chart" style="height: 500px; width: 100%;"></div>
                <div id="chartContainer2" class="chart" style="height: 500px; width: 100%;"></div>
                <div id="chartContainer3" class="chart" style="height: 500px; width: 100%;"></div>
                <div id="chartContainer4" class="chart" style="height: 500px; width: 100%;"></div>

                <script src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
                <script src="https://canvasjs.com/assets/script/jquery.canvasjs.min.js"></script>
            </div>
        </div>

        <datalist id="interval-values">
            <option>One-time Purchase</option>
            <option>Weekly</option>
            <option>Bi-weekly</option>
            <option>Monthly</option>
            <option>Bi-annually</option>
            <option>Annually</option>
        </datalist>

        <script>
            var intervalValues = ["One-time", "Weekly", "Bi-weekly", "Monthly", "Bi-Monthly", "Bi-annually", "Annually"];

            document.getElementById("result-date").value = (new Date()).toISOString().substr(0, 10);

                function updateInputHeader() {
                    if (document.getElementById("input-checkbox").checked) {
                        document.getElementById("input-type-text").innerHTML = "$ (USD)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
                    } else {
                        document.getElementById("input-type-text").innerHTML = "# of Shares"
                    }
            }

            var $loading = $('.loader').hide();

            addNewRow();

            // Adding a new row for inputting stock purchase
            function addNewRow() {
                var row = document.createElement("div");
                row.setAttribute("class", "inputs row");

                var stockInput = document.createElement("input");
                stockInput.setAttribute("type", "text");
                stockInput.className = "stock-inputs";

                var numSharesInput = document.createElement("input");
                numSharesInput.setAttribute("type", "number");
                numSharesInput.setAttribute("min", "0");
                numSharesInput.className = "numShares-inputs";

                var dateInput = document.createElement("input");
                dateInput.setAttribute("type", "date");
                dateInput.className = "date-inputs";

                var intervalSelect = document.createElement("SELECT");
                intervalSelect.className = "interval-inputs";

                for (var i = 0; i < intervalValues.length; i++) {
                    var intervalOption = document.createElement("option");
                    intervalOption.setAttribute("value", intervalValues[i]);
                    intervalOption.appendChild(document.createTextNode(intervalValues[i]));
                    intervalSelect.appendChild(intervalOption);
                }

                var removeButton = document.createElement("button");
                removeButton.innerHTML = "X";
                removeButton.className = "remove-button";
                removeButton.onclick = () => {
                    document.getElementById("inputs-all-rows").removeChild(row);
                }

                row.appendChild(stockInput);
                row.appendChild(numSharesInput);
                row.appendChild(dateInput);
                row.appendChild(intervalSelect);
                row.appendChild(removeButton);

                document.getElementById("inputs-all-rows").appendChild(row);
            }

            function isValid(str){
             return !/[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g.test(str);
            }


            function addMonths(date, months) {
                var d = date.getDate();
                date.setMonth(date.getMonth() + +months);
                if (date.getDate() != d) {
                  date.setDate(0);
                }
                return date;
            }

            function calculatePortfolio() {
                // handle animations 
                $loading.show();
                $('#empty-block').show();
                $('#result-data').hide();
                $('html,body').animate({
                    scrollTop: $("#result-div").offset().top
                }, 'slow');            


                // Organize the data before sending it to the controller
                var stockInputs = $(".stock-inputs");
                var numSharesInputs = $(".numShares-inputs");
                var dateInputs = $(".date-inputs");
                var frequencyInputs = $(".interval-inputs");

                var targetDate = document.getElementById("result-date").value;

                var count = stockInputs.length;

                let inputData = [];

                // Organize each row data into each dict
                for (i = 0; i < count; i++) {
                    var symbol = stockInputs[i].value.trim();
                    var numShares = numSharesInputs[i].value.trim();
                    var date = dateInputs[i].value;
                    var frequency = frequencyInputs[i].value;

                    var today = new Date();

                    if (symbol == "" || !isValid(symbol) || isNaN(numShares) || numShares < 0 || date == "" || intervalValues.indexOf(frequency) === -1 || parseDate(date) > today) {
                        alert("Unallowed value on row: " + (i + 1));
                        return;
                    }

                    inputData.push({
                        symbol: symbol,
                        sharesBought: numShares,
                        date: date
                    });

                    var intervalIndex = intervalValues.indexOf(frequency);

                    if (intervalIndex > 2) { // if intervals can be represented in months
                        var monthIntervals = 0;

                        if (intervalIndex === 3) {
                            monthIntervals = 1;
                        } else if (intervalIndex === 4) {
                            monthIntervals = 2;
                        } else if (intervalIndex === 5) {
                            monthIntervals = 6;
                        } else if (intervalIndex === 6) {
                            monthIntervals = 12;
                        }
                        var indexDate = parseDate(date);
                        indexDate = addMonths(indexDate, monthIntervals);

                        while (indexDate.getTime() <= today.getTime()) {
                            var dateString = indexDate.toISOString();
                            dateString = dateString.substring(0, dateString.indexOf("T"));

                            inputData.push({
                                symbol: symbol,
                                sharesBought: numShares,
                                date: dateString
                            });

                            indexDate = addMonths(indexDate, monthIntervals);
                        }

                    } else if (intervalIndex > 0) { // if intervals can be represented in days
                        var dayIntervals = 0;
                        if (intervalIndex === 1) {
                            dayIntervals = 7;
                        } else if (intervalIndex === 2) {
                            dayIntervals = 14;
                        }

                        var indexDate = parseDate(date);
                        indexDate.setDate(indexDate.getDate() + dayIntervals);

                        while (indexDate.getTime() <= today.getTime()) {
                            var dateString = indexDate.toISOString();
                            dateString = dateString.substring(0, dateString.indexOf("T"));

                            inputData.push({
                                symbol: symbol,
                                sharesBought: numShares,
                                date: dateString
                            });

                            indexDate.setDate(indexDate.getDate() + dayIntervals);
                            
                        }
                    }
                }

                console.log("inputData:", inputData);

                var moneyFormat = document.getElementById("input-checkbox").checked;
                var reinvestDividends = document.getElementById("input-checkbox-reinvest").checked;

                $.ajax({
                    url: "@Url.Action("Calculate")",
                    dataType: "json",
                    type: 'POST',
                    data: { inputData: JSON.stringify(inputData), targetDate: targetDate, moneyFormat: moneyFormat, reinvestDividends: reinvestDividends },
                    success: function (response) {
                        $loading.hide();
                        displayResults(response.result);
                    },
                    error: function (error) {
                        $loading.hide();
                        console.log(error);
                            alert("Error !!");
                        }
                });
            }

            // startOfYearDataPoints is passed in as a reference as an out parameter
            function displayNetworthOverTime(networthDataPoints, startOfYearDataPoints) {
                var dataPointsForNetworth = [];

                var yearIndex = (new Date(networthDataPoints[0].date)).getFullYear(); 

                networthDataPoints.forEach(function (dataPoint) {
                    var date = new Date(dataPoint.date);

                    // check if a new year has occured
                    if (yearIndex != date.getFullYear()) {
                        startOfYearDataPoints.push(dataPoint);
                        yearIndex = date.getFullYear();
                    }

                    dataPointsForNetworth.push({ x: date, y: dataPoint.totalValue });
                });

                var options =  {
	                animationEnabled: true,
	                theme: "dark2",
	                title: {
                        text: "Portfolio Value",
                        fontSize: 30,
                        fontFamily: "Calibri"
	                },
	                axisX: {
		                valueFormatString: "DD MMM YYYY",
	                },
	                axisY: {
		                title: "USD",
		                titleFontSize: 24,
                        includeZero: false,
                        fontFamily: "Calibri"
	                },
	                data: [{
		                type: "spline",
		                yValueFormatString: "$#,###.##",
		                dataPoints: dataPointsForNetworth
	                }]
                };

                var networthOverTimeChart = new CanvasJS.Chart("chartContainer1", options);
                networthOverTimeChart.render();
            }

            function displaySharesDistribution(networthDataPoints, allStockPriceData) {
                var finalDataPoint = networthDataPoints[networthDataPoints.length - 1];

                var sharesDataPoints = [];
                var symbolsAndValue = [];

                for (var i = 0; i < allStockPriceData.length; i++) {
                    var dataForStock = allStockPriceData[i];
                    var resultStock = dataForStock[dataForStock.length - 1];
                    var totalValueOfStock = resultStock.sharesOwned * resultStock.price;

                    symbolsAndValue.push({
                        symbol: resultStock.symbol,
                        totalValueOfStock: totalValueOfStock,
                        numShares: resultStock.sharesOwned,
                        valueOfSharesBoughtWithDividend: resultStock.sharesBoughtWithDividend * resultStock.price
                    });
                }

                for (var i = 0; i < symbolsAndValue.length; i++) {
                    sharesDataPoints.push({ y: (((symbolsAndValue[i].totalValueOfStock + symbolsAndValue[i].valueOfSharesBoughtWithDividend) / finalDataPoint.totalValue) * 100).toFixed(2), totalValue: symbolsAndValue[i].totalValueOfStock.toFixed(2), label: symbolsAndValue[i].symbol, numShares: symbolsAndValue[i].numShares.toFixed(2) });
                }

                if (finalDataPoint.dividendEarned > 0) {
                    sharesDataPoints.push({ y: ((finalDataPoint.dividendEarned / finalDataPoint.totalValue) * 100).toFixed(2), totalValue: finalDataPoint.dividendEarned.toFixed(2), label: "dividends", numShares: 0 });
                }

                options = {
                    animationEnabled: true,
                    theme: "dark2",
                    title: {
                        text: "Shares Distribution (Value)",
                        fontSize: 30,
                        fontFamily: "Calibri"
                    },
                    data: [{
                        type: "pie",
                        startAngle: 40,
                        toolTipContent: "<b>{label}</b>: ${totalValue} | {numShares} shares",
                        showInLegend: "false",
                        legendText: "{label}",
                        indexLabelFontSize: 16,
                        indexLabel: "{label} - {y}%",
                        dataPoints: sharesDataPoints
                    }]
                };

                var sharesDistributionChart = new CanvasJS.Chart("chartContainer2", options);
                sharesDistributionChart.render();
            }

            function displayValueGrowthSource(networthDataPoints, allStockPriceData) {
                var finalDataPoint = networthDataPoints[networthDataPoints.length - 1];
                var totalEarnings = finalDataPoint.totalValue - finalDataPoint.totalCost;
                var earningsDataPoints = [];

                // if dividends were re-invested
                if (finalDataPoint.dividendEarned > 0) {
                    var earningsFromStockGrowth = totalEarnings - finalDataPoint.dividendEarned;
                    earningsDataPoints.push({ y: ((earningsFromStockGrowth / totalEarnings) * 100).toFixed(2), label: "Stock Value Growth" })
                    earningsDataPoints.push({ y: ((finalDataPoint.dividendEarned / totalEarnings) * 100).toFixed(2), label: "Dividends Earned" })
                } else {
                    var earningsFromStockGrowthExcludingDividends = totalEarnings - finalDataPoint.valueOfSharesFromDividend;
                    earningsDataPoints.push({ y: ((earningsFromStockGrowthExcludingDividends / totalEarnings) * 100).toFixed(2), label: "Stock Value Growth" })
                    earningsDataPoints.push({ y: ((finalDataPoint.valueOfSharesFromDividend / totalEarnings) * 100).toFixed(2), label: "Shares from dividends" })
                }

                options = {
                    animationEnabled: true,
                    theme: "dark2",
                    title: {
                        text: "Value Growth Source",
                        fontSize: 30,
                        fontFamily: "Calibri"
                    },
                    data: [{
                        type: "pie",
                        startAngle: 40,
                        toolTipContent: "<b>{label}</b>: {y}%",
                        showInLegend: "true",
                        legendText: "{label}",
                        indexLabelFontSize: 16,
                        indexLabel: "{label} - {y}%",
                        dataPoints: earningsDataPoints
                    }]
                };

                var earningSourceChart = new CanvasJS.Chart("chartContainer3", options);

                earningSourceChart.render();
            }

            function displayYearlyContributionAndEarnings(startOfYearDataPoints) {
                var contributionDataPoints = [];
                var earningsDataPoints = [];

                var previousEarnings = 0;
                var previousContributions = 0;
                
                for (var i = 0; i < startOfYearDataPoints.length; i++) {
                    var dataPoint = startOfYearDataPoints[i];

                    if (i == startOfYearDataPoints.length - 1) {
                        var dateString = new Date(dataPoint.date).getFullYear();
                    } else {
                        var dateString = new Date(dataPoint.date).getFullYear() - 1;
                    }

                    contributionDataPoints.push({
                        label: dateString,
                        y: Math.round((dataPoint.totalCost - previousContributions)*100)/100
                    });

                    earningsDataPoints.push({
                        label: dateString,
                        y: Math.round((dataPoint.totalValue - previousEarnings - (dataPoint.totalCost - previousContributions)) * 100) / 100
                    });

                    previousContributions = dataPoint.totalCost;
                    previousEarnings = dataPoint.totalValue;
                }


                console.log("contributionDataPoints: ", contributionDataPoints);

                var options = {
                    animationEnabled: true,
                    theme: "dark2",
	                title:{
                        text: "Yearly Contributions vs Earnings",
                        fontSize: 30,
                        fontFamily: "Calibri"
	                },
	                axisX: {
		                title: "Year"
	                },
	                //axisY: {
		               // lineColor: "#4F81BC",
		               // labelFontColor: "#4F81BC",
		               // tickColor: "#4F81BC"
	                //},
	                toolTip: {
		                shared: true
	                },
	                legend: {
		                cursor: "pointer",
	                },
                    data: [{
		                type: "column",
		                name: "Contributions",
		                showInLegend: true,      
                        indexLabel: ((contributionDataPoints.length > 10) ? "{}" : "${y}"),
                        dataPoints: contributionDataPoints
	                },
	                {
		                type: "column",
		                name: "Earnings",
		                //axisYType: "secondary",
		                showInLegend: true,
		                indexLabel: ((contributionDataPoints.length > 10) ? "{}" : "${y}"),
		                dataPoints: earningsDataPoints
	                }]
                }

                var yearlyContributionAndEarningsChart = new CanvasJS.Chart("chartContainer4", options);
                yearlyContributionAndEarningsChart.render();
            }


            function populateResultText(networthDataPoints) {
                var finalDataPoint = networthDataPoints[networthDataPoints.length - 1];

                document.getElementById("total-cost-text").innerHTML = "Total Cost: $" + numberWithCommas(finalDataPoint.totalCost.toFixed(2));
                document.getElementById("total-value-text").innerHTML = "Value as of today: $" + numberWithCommas(finalDataPoint.totalValue.toFixed(2));

                var roi = (finalDataPoint.totalValue - finalDataPoint.totalCost) / finalDataPoint.totalCost;
                document.getElementById("roi-text").innerHTML = "Return on Investments: " + (roi * 100).toFixed(2) + "%";

                if (roi > 0) {
                    document.getElementById("roi-text").style.color = "#4CAF50";
                } 
                if (roi < 0) {
                    document.getElementById("roi-text").style.color = "red";
                }

                if (finalDataPoint.dividendEarned > 0 && finalDataPoint.valueOfSharesFromDividend <= 0) {
                    document.getElementById("dividend-earned-text").innerHTML = "Earnings from Dividends: $" + numberWithCommas(finalDataPoint.dividendEarned.toFixed(2));
                } else {
                    document.getElementById("dividend-earned-text").innerHTML = "Value from shares bought with Dividends: $" + numberWithCommas(finalDataPoint.valueOfSharesFromDividend.toFixed(2));
                }

                document.getElementById("average-annual-yield-text").innerHTML = "";
            }

            function displayResults(result) {
                $('#result-data').show();
                $('#empty-block').hide();

                var formattedResult = JSON.parse(result);
                var allStockPriceData = formattedResult.allStockPriceData;
                var networthDataPoints = formattedResult.networthDataPoints;
                var startOfYearDataPoints = [];

                console.log("networthDataPoints:", networthDataPoints);
                console.log("allStockPriceData:", allStockPriceData);

                populateResultText(networthDataPoints);

                displayNetworthOverTime(networthDataPoints, startOfYearDataPoints);
                
                displaySharesDistribution(networthDataPoints, allStockPriceData);

                console.log("startOfYearDataPoints:", startOfYearDataPoints);

                var finalDataPoint = networthDataPoints[networthDataPoints.length - 1];

                // only generate if there was growth
                if (finalDataPoint.totalValue - finalDataPoint.totalCost > 0) {
                    displayValueGrowthSource(networthDataPoints);
                    document.getElementById("chartContainer3").style.display = "block";
                } else {
                    document.getElementById("chartContainer3").style.display = "none";
                }

                startOfYearDataPoints.push(networthDataPoints[networthDataPoints.length -1]);
                displayYearlyContributionAndEarnings(startOfYearDataPoints);
            }

            function parseDate(s) {
                var b = s.split(/\D/);
                return new Date(b[0], --b[1], b[2]);
            }

            function numberWithCommas(x) {
                return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            }


        </script>

    </asp:Content>
